# Use a Debian-based Postgres image as the base
FROM postgres:17

# Add PostgreSQL repository for PostGIS and pgRouting
RUN apt-get update \
    && apt-get install -y gnupg2 lsb-release curl \
    && sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' \
    && curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

# Install build-essential tools and required packages
RUN apt-get update && \
    apt-get install -y build-essential wget git jq cmake gnupg postgresql-common apt-transport-https \
    protobuf-c-compiler libprotobuf-c-dev postgresql-server-dev-17 libkrb5-dev \
    # Install PostGIS and pgRouting from packages
    postgresql-17-postgis-3 postgresql-17-pgrouting \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Clone timescaledb source code from GitHub
RUN git clone https://github.com/timescale/timescaledb && \
    cd timescaledb && \
    git checkout 2.19.3 && \
    ./bootstrap && \
    cd build && make && \
    make install

# Install pgvector extension
RUN cd /tmp && \
    git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git && \
    cd pgvector && \
    make && \
    make install

# Specify the extensions in the PostgreSQL configuration
RUN echo "shared_preload_libraries = 'timescaledb,vector'" >> /usr/share/postgresql/postgresql.custom.conf

# Add pgcrypto to PostgreSQL configuration
# RUN echo "local_preload_libraries = 'pgcrypto'" >> /usr/share/postgresql/postgresql.custom.conf

# Create a custom PostgreSQL configuration file
COPY docker/volumes/timescaledb/postgresql.custom.conf /etc/postgresql/postgresql.conf

# Create a custom pg_hba.conf file
COPY docker/volumes/timescaledb/pg_hba.custom.conf /etc/postgresql/pg_hba.conf

# Copy the certificates to the PostgreSQL configuration directory
COPY docker/volumes/timescaledb/certs/ca.crt /etc/postgresql/certs/ca.crt
COPY docker/volumes/timescaledb/certs/server.crt /etc/postgresql/certs/server.crt
COPY docker/volumes/timescaledb/certs/server.key /etc/postgresql/certs/server.key
RUN chown -R postgres:postgres /etc/postgresql/certs && \
    chmod 400 /etc/postgresql/certs/server.key && \
    chmod 600 /etc/postgresql/certs/server.crt /etc/postgresql/certs/ca.crt

# Note: create_db.sql is mounted by docker-compose, not copied here
# to avoid conflicts and ensure latest version is used

# Set the script as the entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Start PostgreSQL cluster
CMD ["postgres", \
        "-c", "config_file=/etc/postgresql/postgresql.conf", \
        "-c", "hba_file=/etc/postgresql/pg_hba.conf", \
        "-c", "ssl=on", \
        "-c", "ssl_cert_file=/etc/postgresql/certs/server.crt", \
        "-c", "ssl_key_file=/etc/postgresql/certs/server.key", \
        "-c", "ssl_ca_file=/etc/postgresql/certs/ca.crt"]